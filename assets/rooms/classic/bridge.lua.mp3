-- BRIDGE MODRENIZED

function sectionClean()
	buildBridge(z, 1, 15, 5)
	b = mgRndInt(0, 3)
	if b == 0 then
		--mgPowerUp("multiball", 0, 0, z-2)
	elseif b == 1 then
		mgPowerUp("balls", 0, 0, z-2)
	elseif b == 2 then
		--mgPowerUp("ballfrenzy", 0, 0, z-2)
	elseif b == 3 then
		--mgPowerUp("nitroballs", 0, 0, z-2)
	end
	z = z - 5
end


function sectionScoreTops()
	buildBridge(z, 1, 15, 5)
	z = z - 2
	mgBox(0.5, 10, 0.5, -2, -10, z)
	mgObstacle("classic/scoretop", -2, 0, z)
	mgBox(0.5, 10, 0.5, 2, -10, z)
	mgObstacle("classic/scoretop", 2, 0, z)
	z = z - 3
end

function sectionElevator()
	buildBridge(z, 1, 15, 5)
	mgObstacle("classic/diamondelevator", -3, 0, z-2)
	mgObstacle("classic/diamondelevator", 3, 0, z-2)
	z = z - 5
end

function sectionSweeper()
	buildBridge(z, 1, 15, 10)
	mgObstacle("classic/sideSweeper", 0, 0, z-6, "width=2.5")
	mgObstacle("classic/sideSweeper", 0, 0, z-7, "width=2.5")
	mgObstacle("classic/sideSweeper", 0, 0, z-8, "width=2.5")
	mgObstacle("classic/sideSweeper", 0, 0, z-9, "width=2.5")
	mgPowerUp("multiball", 0, 0, z-1)
	z = z - 10
end

function sectionPyramid()
	mgBox(2.5, 0.2, 2.5, 0, -0.2, z-2.5)
	buildPillar(-2, 0, z-0.5, 0.2)
	buildPillar(2, 0, z-0.5, 0.2)
	buildPillar(-2, 0, z-4.5, 0.2)
	buildPillar(2, 0, z-4.5, 0.2)
	mgObstacle("classic/pyramid", 0, 0, z-2)
	mgPowerUp("barrel", -1.5, 1, z-2)
	mgPowerUp("barrel", 1.5, 1, z-2)
	z = z - 5

	buildBridge(z, 1, 15, 5)
	z = z - 5
end


function sectionRow()
	mgBox(2.5, 0.2, 0.5, -3, -0.2, z-6)
	mgBox(2.5, 0.2, 0.5, 3, -0.2, z-6)
	mgBox(2.5, 0.05, 0.3, 0, 0.06, z-6)
	mgObstacle("classic/scoretop", -2, 0.1, z-6)
	mgObstacle("classic/scoretop", -1, 0.1, z-6)
	mgObstacle("classic/scoretop", 0, 0.1, z-6)
	mgObstacle("classic/scoretop", 1, 0.1, z-6)
	mgObstacle("classic/scoretop", 2, 0.1, z-6)
	buildBridge(z, 1, 15, 8)
	if difficulty >= 0.25 then
		mgBox(4.5, 0.1, 0.5, 0, 1.9, z-6)
		mgObstacle("classic/scoretop", -2, 2.0, z-6)
		mgObstacle("classic/scoretop", -1, 2.0, z-6)
		mgObstacle("classic/scoretop", 0, 2.0, z-6)
		mgObstacle("classic/scoretop", 1, 2.0, z-6)
		mgObstacle("classic/scoretop", 2, 2.0, z-6)
		mgPowerUp("ballfrenzy", 0, 1, z-1)
	else
		mgPowerUp("slowmotion", 0, 1, z-1)
	end
	z = z - 8
end

function init()
	seed = mgGetInt("seed", 0)
	difficulty = mgGetFloat("difficulty", 1.0)
	music = mgGetString("music", "1")
	
	mgRandomize(seed)
	length = 60 + 50 * difficulty

	--Setup
	mgLength(length)
	mgMusic(music)
	
	mgColor(1, 1, 1)

	mgBox(7, 0.5, length/2, 0, -5.5, -length/2)
	mgBox(7, 0.5, length/2, 0, 6.5, -length/2)
	mgBox(2, 0.5, length/2, -5.5, 5.5, -length/2)
	mgBox(2, 0.5, length/2, 5.5, 5.5, -length/2)
	mgBox(1, 5, length/2+0.5, -5.5, 0, -length/2)
	mgBox(1, 5, length/2+0.5, 5.5, 0, -length/2)
	
	z = 0
	buildBridge(z, 1, 15, 10)
	z = z - 10

	addSection(sectionClean, 1)
	addSection(sectionScoreTops, 1)
	addSection(sectionElevator, 0.5, 2)
	addSection(sectionPyramid, 1)
	addSection(sectionRow, 0.3, 1)
	if difficulty > 0.5 then
		addSection(sectionSweeper, 1, 1)
	end

	while z > -length+10 do
		func = nextSection()
		func()
	end
		
	buildBridge(z, 1, 15, length+z)
		
	--Door at end
	buildEndWallNoFloor(9, 15, length, 2, 2, 0.5)
	mgObstacle("classic/door1", 0, 0, -length, "buttons=" .. mgRndInt(0, 2))	
end


