
gSegment = {}
gLastSegment = 0
gTotalProb = 0.0


function confSegment(name, prob, times)
	times = times or 1000
	gSegment[#gSegment+1] = {name, prob, times, 0}
	gTotalProb  = gTotalProb + prob
end


function nextSegment()
	s = 0
	if #gSegment == 1 then
		return gSegment[1][1]
	end
	repeat
		p = 0.0
		r = mgRndFloat(0, 1)
		for i=1, #gSegment do
			p = p + gSegment[i][2]/gTotalProb
			if p > r then
				if i == gLastSegment or gSegment[i][4] == gSegment[i][3] then
					break
				else
					s = i
					break
				end
			end
		end
	until s > 0
	gLastSegment = s
	gSegment[s][4] = gSegment[s][4] + 1
	return gSegment[s][1]
end

-- Classic stages

gSections = {}
gLastSection = 0


function addSection(func, prob, times)
	times = times or 1000
	gSections[#gSections+1] = {func, prob, times, 0}
	gTotalProb  = gTotalProb + prob
end


function nextSection()
	s = 0
	if #gSections == 1 then
		return gSections[1][1]
	end
	repeat
		p = 0.0
		r = mgRndFloat(0, 1)
		for i=1, #gSections do
			p = p + gSections[i][2]/gTotalProb
			if p > r then
				if i == gLastSection or gSections[i][4] == gSections[i][3] then
					break
				else
					s = i
					break
				end
			end
		end
	until s > 0
	gLastSection = s
	gSections[s][4] = gSections[s][4] + 1
	return gSections[s][1]
end


function buildWalls(width, height, length)
	mgBox(width/2+1, 0.5, length/2, 0, -0.5, -length/2)
	mgBox(width/2+1, 0.5, length/2, 0, height+0.5, -length/2)
	mgBox(0.5, height/2, length/2, -width/2-0.5, height/2, -length/2)
	mgBox(0.5, height/2, length/2, width/2+0.5, height/2, -length/2)
end


function buildEndWall(width, height, length, doorWidth, doorHeight, doorDepth)
	mgBox((width-doorWidth)/4, height/2, doorDepth/2, -(width+doorWidth)/4, height/2, -length+doorDepth/2)
	mgBox((width-doorWidth)/4, height/2, doorDepth/2, (width+doorWidth)/4, height/2, -length+doorDepth/2)
	if height > doorHeight then
		mgBox(doorWidth/2, (height-doorHeight)/2, doorDepth/2, 0, (height+doorHeight)/2, -length+doorDepth/2)
	end
end


function buildEndWallNoFloor(width, height, length, doorWidth, doorHeight, doorDepth)
	buildEndWall(width, height, length, doorWidth, doorHeight, doorDepth)
	mgBox(width/2, height/2 ,doorDepth/2, 0, -height/2, -length+doorDepth/2)
end


function buildBridge(z, width, height, length)
	mgBox(width/2, height/2, length/2, 0, -height/2, z-length/2)
end


function powerUpShelfFront(x, y, z, type)
	b, px, py, pz = mgRaycast(x, y, z, x, y, z-100)
	if b then
		print(px, py, pz)
		mgBox(0.5, 0.1, 0.5, px, py, pz+0.5)
		mgPowerUp(type, px, py+0.5, pz+0.5)
	end
end


function buildPillar(x, y, z, thickness)
	thickness = thickness or 0.4
	b, bx, by, bz = mgRaycast(x, y, z, x, y-100, z)
	t, tx, ty, tz = mgRaycast(x, y, z, x, y+100, z)
	if b and t then
		mgBox(thickness, (ty-by)/2, thickness, x, (ty-by)/2, z)
	end
end
